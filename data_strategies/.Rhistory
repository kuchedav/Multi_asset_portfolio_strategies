if(plot_returns == T){
matplot(mat_cumsum,type="l",lty =  1)
abline(h = 0)
legend("topleft",
lty=c(1,1),
lwd=1,col=1:ncol(mat_cumsum),
legend = colnames(mat_cumsum),
cex = 0.8
)
}
setwd("/Users/davidkuchelmeister/")
if(save_csv == T){
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv")
write.csv(x = equal$returns,file = "Studium/Bachelor Arbeit/Shiny David test/data_strategies/equal.csv")
write.csv(x = global.min$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/global.min.csv")
write.csv(x = max.decorrelation$returns, file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/max.decorrelation.csv")
write.csv(x = tangency$returns,file = "Studium/Bachelor Arbeit/Shiny David test/data_strategies/tangency.csv")
}
}
# calcualte_portfolios(backtest.length = 4000,plot_returns = T,save_csv = F)
calcualte_portfolios(backtest.length = 4000,plot_returns = T,save_csv = T)
calcualte_portfolios(backtest.length = 4000,plot_returns = T,save_csv = T)
shiny::runApp('Studium/Bachelor Arbeit/Shiny David test')
### Loading the Data from CSV Files and transforming it into a Data.frame form
Load_Data <- function(Data.Path,zugeschnitten = F, returns = F, return.normal.Data = F){
require(xts)
if(return.normal.Data == T){
Data.norm <- xts(matrix(rnorm(5000*21,sd = 0.2,mean = 0.01),ncol = 21),order.by = Sys.Date()-1:5000)
return(Data.norm)
}
if(returns == F){
# Load the volume data
Data.names <- c("FTSE100_1984-05-04","Nikkei225_1990-09-26","SP500_1982-04-22","US_2Y_Note_1990-06-25","US_30Y_1977-08-23","AUD_1987-01-14","CHF_1975-02-14","GBP_1975-02-14","Copper_1959-07-06","Cotton_1972-08-23","Brent_Crude_1993-03-18","Gas_Oil_1989-12-12","Heating_Oil_1979-03-07","Natural Gas_1990-04-04","Gold_1975-01-02","Palladium_1977-01-06","Platinum_1969-01-03","Long_Gilt_1990-08-20","US_5Y_Note_1988-05-23","US_10Y_1982-05-04")
}else{
# Load the return data
Data.names <- c("FTSE100_returns_1984-05-08","Nikkei225_returns_1990-09-27","SP500_returns_1982-04-23","US_2Y_Note_returns_1990-06-26","US_30Y_returns_1977-08-24","AUD_returns_1987-01-15","CHF_returns_1975-02-18","GBP_returns_1975-02-18","Copper_returns_1959-07-07","Cotton_returns_1972-08-24","Brent_Crude_returns_1993-03-19","Gas_Oil_returns_bereinigt_1989-12-13","Heating_Oil_returns_bereinigt_1979-03-08","Natural Gas_returns_1990-04-05","Gold_returns_1975-01-03","Palladium_returns_1977-01-07","Platinum_returns_1969-01-06","Long_Gilt_returns_1990-08-21","US_5Y_Note_returns_1988-05-24","US_10Y_returns_1982-05-05")
}
wd <- getwd()
setwd(Data.Path)
Data <- list()
Dat <- Reduce(merge.xts, lapply(Data.names, function(name) {
tmp <- read.csv(paste(name,".csv",sep = ""),header = T)
xts(tmp$Settle, order.by = as.Date(tmp$Date))
} ))
setwd(wd)
colnames(Dat) <- Data.names
# Missing data is filled with the same return as the day before
Dat <- na.locf(Dat)
if(zugeschnitten==T){
return(na.exclude(Dat))
}else{
Dat
}
}
Data.Path <- "/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Datenreihen/SCF_Daten/"
Data.Path <- "/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Datenreihen/Data_Chosen/"
Data <- Load_Data(Data.Path)
Data
Data <- Load_Data(Data.Path,returns = T)
matplot(log(Data),type="l")
Data.names <- c("FTSE100_returns_1984-05-08","Nikkei225_returns_1990-09-27","SP500_returns_1982-04-23","US_2Y_Note_returns_1990-06-26","US_30Y_returns_1977-08-24","AUD_returns_1987-01-15","CHF_returns_1975-02-18","GBP_returns_1975-02-18","Copper_returns_1959-07-07","Cotton_returns_1972-08-24","Brent_Crude_returns_1993-03-19","Gas_Oil_returns_bereinigt_1989-12-13","Heating_Oil_returns_bereinigt_1979-03-08","Natural Gas_returns_1990-04-05","Gold_returns_1975-01-03","Palladium_returns_1977-01-07","Platinum_returns_1969-01-06","Long_Gilt_returns_1990-08-21","US_5Y_Note_returns_1988-05-24","US_10Y_returns_1982-05-05")
wd <- getwd()
setwd(Data.Path)
Data <- list()
Dat <- Reduce(merge.xts, lapply(Data.names, function(name) {
tmp <- read.csv(paste(name,".csv",sep = ""),header = T)
xts(tmp$Settle, order.by = as.Date(tmp$Date))
} ))
setwd(wd)
colnames(Dat) <- Data.names
Dat <- na.locf(Dat)
Dat
runApp('Studium/Bachelor Arbeit/Shiny David test')
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv")
write.csv(x = equal$returns,file = "Studium/Bachelor Arbeit/Shiny David test/data_strategies/equal.csv")
write.csv(x = global.min$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/global.min.csv")
write.csv(x = max.decorrelation$returns, file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/max.decorrelation.csv")
write.csv(x = tangency$returns,file = "Studium/Bachelor Arbeit/Shiny David test/data_strategies/tangency.csv")
runApp('Studium/Bachelor Arbeit/Shiny David test')
efficient
efficient$returns
length(efficient$returns)
calcualte_portfolios <- function(backtest.length = 1000, plot_returns = F, save_csv = F){
# Folder where the Portfolio global folder is saved
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Portfolio/")
source("Efficient/efficient_anwenden.R")
source("Equal Weights/equal_weights_anwenden.R")
source("Global Min/global_min_anwenden.R")
source("Max Decorrelation/max_decorrelation_anwenden.R")
source("Tangency/tangency_anwenden.R")
efficient <- efficient_anwenden(backtest.length); print("efficient Portfolio loaded")
equal <- euqal_weights(backtest.length); print("equal Portfolio loaded")
global.min <- global_min_anwenden(backtest.length); print("global.min Portfolio loaded")
tangency <- tangency_anwenden(backtest.length); print("tangency Portfolio loaded")
max.decorrelation <- max_decorrelation_anwenden(backtest.length); print("max.decorrelation Portfolio loaded")
mat <- merge.xts(efficient$returns,equal$returns,global.min$returns,tangency$returns,max.decorrelation$returns)
mat_cumsum <- merge.xts(cumsum(efficient$returns),cumsum(equal$returns),cumsum(global.min$returns),cumsum(tangency$returns),cumsum(max.decorrelation$returns))
if(plot_returns){
matplot(mat_cumsum,type="l",lty =  1)
abline(h = 0)
legend("topleft",
lty=c(1,1),
lwd=1,col=1:ncol(mat_cumsum),
legend = colnames(mat_cumsum),
cex = 0.8
)
}
setwd("/Users/davidkuchelmeister/")
if(save_csv){
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv")
write.csv(x = equal$returns,file = "Studium/Bachelor Arbeit/Shiny David test/data_strategies/equal.csv")
write.csv(x = global.min$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/global.min.csv")
write.csv(x = max.decorrelation$returns, file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/max.decorrelation.csv")
write.csv(x = tangency$returns,file = "Studium/Bachelor Arbeit/Shiny David test/data_strategies/tangency.csv")
}
}
# calcualte_portfolios(backtest.length = 4000,plot_returns = T,save_csv = T)
portfolios <- calcualte_portfolios(backtest.length = 4000,plot_returns = T,save_csv = T)
runApp('Studium/Bachelor Arbeit/Shiny David test')
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/")
source("init_app.R")
working_dir = getwd()
working_dir
raw.data.path <- file.path(working_dir,"data_chosen",sep = "/")
raw.data.path
runApp()
runApp()
runApp()
read.csv(raw.data.path)$Settle
read.csv(file.path(raw.data.path,"FTSE100_1984-05-04.csv"))$Settle
datafile <- read.csv(file.path(data.path,input$chosenTicker))[,2]
getwd()
r_public_path = file.path(working_dir,"copy","r_public")
r_strategy_path   = file.path(working_dir,"copy")
# change the path to r_public and strategy if you are using an app
###################### CHANGE ME
data.path <- paste(working_dir,"data_strategies",sep = "/")
raw.data.path <- file.path(working_dir,"data_chosen",sep = "/")
datafile <- read.csv(file.path(data.path,input$chosenTicker))[,2]
datafile
datafile[,2]
index(datafile[,2])
runApp()
index(datafile[,2])
runApp()
datafile
datafile[[1]]
datafile[,1]
datafile[,2]
index(datafile[,2])
runApp()
runApp()
runApp()
datafile
read.csv("data_strategies/efficient.csv")
read.csv("data_strategies/efficient.csv")[,2]
Data.names <- c("FTSE100_returns_1984-05-08","Nikkei225_returns_1990-09-27","SP500_returns_1982-04-23","US_2Y_Note_returns_1990-06-26","US_30Y_returns_1977-08-24","AUD_returns_1987-01-15","CHF_returns_1975-02-18","GBP_returns_1975-02-18","Copper_returns_1959-07-07","Cotton_returns_1972-08-24","Brent_Crude_returns_1993-03-19","Gas_Oil_returns_bereinigt_1989-12-13","Heating_Oil_returns_bereinigt_1979-03-08","Natural Gas_returns_1990-04-05","Gold_returns_1975-01-03","Palladium_returns_1977-01-07","Platinum_returns_1969-01-06","Long_Gilt_returns_1990-08-21","US_5Y_Note_returns_1988-05-24","US_10Y_returns_1982-05-05")
efficient
efficient$returns
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv")
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Portfolio/")
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv")
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Portfolio/")
efficient$returns
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv")
setwd("/Users/davidkuchelmeister/")
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv")
index(efficient$returns)
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv",
row.names = index(efficient$returns))
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv",
row.names = index(efficient$returns))
write.csv(x = equal$returns,file = "Studium/Bachelor Arbeit/Shiny David test/data_strategies/equal.csv",
row.names = index(efficient$returns))
write.csv(x = global.min$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/global.min.csv",
row.names = index(efficient$returns))
write.csv(x = max.decorrelation$returns, file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/max.decorrelation.csv",
row.names = index(efficient$returns))
write.csv(x = tangency$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/tangency.csv",
row.names = index(efficient$returns))
read.csv("data_strategies/efficient.csv")
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/")
read.csv("data_strategies/efficient.csv")
read.csv("data_strategies/efficient.csv")[,2]
read.csv("data_strategies/efficient.csv")[,1]
runApp()
read.csv("data_strategies/efficient.csv")
head(read.csv("data_strategies/efficient.csv"))
datafile <- read.csv("data_strategies/efficient.csv")
datafile[,1]
as.date(datafile[,1])
as.Date(datafile[,1])
runApp()
as.Date(datafile[,1])
datafile()[,2]
runApp()
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Portfolio/")
source("Efficient/efficient_anwenden.R")
source("Equal Weights/equal_weights_anwenden.R")
source("Global Min/global_min_anwenden.R")
source("Max Decorrelation/max_decorrelation_anwenden.R")
source("Tangency/tangency_anwenden.R")
efficient <- efficient_anwenden(backtest.length); print("efficient Portfolio loaded")
backtest.length = 4000
efficient <- efficient_anwenden(backtest.length); print("efficient Portfolio loaded")
equal <- euqal_weights(backtest.length); print("equal Portfolio loaded")
global.min <- global_min_anwenden(backtest.length); print("global.min Portfolio loaded")
tangency <- tangency_anwenden(backtest.length); print("tangency Portfolio loaded")
max.decorrelation <- max_decorrelation_anwenden(backtest.length); print("max.decorrelation Portfolio loaded")
mat <- merge.xts(efficient$returns,equal$returns,global.min$returns,tangency$returns,max.decorrelation$returns)
mat_cumsum <- merge.xts(cumsum(efficient$returns),cumsum(equal$returns),cumsum(global.min$returns),cumsum(tangency$returns),cumsum(max.decorrelation$returns))
matplot(mat_cumsum,type="l",lty =  1)
abline(h = 0)
legend("topleft",
lty=c(1,1),
lwd=1,col=1:ncol(mat_cumsum),
legend = colnames(mat_cumsum),
cex = 0.8
)
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv",
row.names = index(efficient$returns))
write.csv(x = equal$returns,file = "Studium/Bachelor Arbeit/Shiny David test/data_strategies/equal.csv",
row.names = index(efficient$returns))
write.csv(x = global.min$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/global.min.csv",
row.names = index(efficient$returns))
write.csv(x = max.decorrelation$returns, file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/max.decorrelation.csv",
row.names = index(efficient$returns))
write.csv(x = tangency$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/tangency.csv",
row.names = index(efficient$returns))
runApp('Studium/Bachelor Arbeit/Shiny David test')
RAW.data
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/")
read.csv("data_chosen/AUD_1987-01-14.csv")
read.csv("data_chosen/AUD_1987-01-14.csv")$Settle
runApp()
runApp()
runApp()
runApp()
read.csv("data_chosen/AUD_1987-01-14.csv")
read.csv("data_chosen/AUD_1987-01-14.csv")$Date
as.Date(read.csv("data_chosen/AUD_1987-01-14.csv")$Date)
RAW.data.xts <- xts(RAW.data()$Settle ,order.by =  as.Date(read.csv("data_chosen/AUD_1987-01-14.csv")$Date))
read.csv("data_chosen/AUD_1987-01-14.csv")$Settle
RAW.data <- read.csv("data_chosen/AUD_1987-01-14.csv")$Settle
RAW.data <- read.csv("data_chosen/AUD_1987-01-14.csv")
RAW.data.xts <- xts(RAW.data()$Settle ,order.by =  as.Date(read.csv("data_chosen/AUD_1987-01-14.csv")$Date))
RAW.data.xts <- xts(RAW.data$Settle ,order.by =  as.Date(read.csv("data_chosen/AUD_1987-01-14.csv")$Date))
RAW.data.xts <- xts(RAW.data$Settle ,order.by =  as.Date(RAW.data$Date))
RAW.data.xts
plot.xts(RAW.data.xts)
runApp()
runApp()
runApp('~/Studium/GitHub/Risk-controlled-multi-asset-strategies/Shiny-App-Extended')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
RAW.data.xts
getReturns(RAW.data.xts
)
ts.plot(getReturns(RAW.data.xts))
ts.plot(read.csv("data_chosen/AUD_returns_1987-01-15.csv"))
read.csv("data_chosen/AUD_returns_1987-01-15.csv")
head(read.csv("data_chosen/AUD_returns_1987-01-15.csv"))
head(read.csv("data_chosen/AUD_returns_1987-01-15.csv")$Settle)
ts.plot(read.csv("data_chosen/AUD_returns_1987-01-15.csv")$Settle)
ts.plot(getReturns(RAW.data.xts))
ts.plot(read.csv("data_chosen/AUD_1987-01-14.csv")$Settle)
read.csv("data_chosen/AUD_1987-01-14.csv")
read.csv("data_chosen/AUD_1987-01-14.csv")[,Date=="2016"]
read.csv("data_chosen/AUD_1987-01-14.csv")[,Date==as.Date("2016")]
ts.plot(read.csv("data_chosen/AUD_returns_1987-01-15.csv")$Settle)
ts.plot(read.csv("data_chosen/AUD_1987-01-14.csv")$Settle)
ts.plot(getReturns(read.csv("data_chosen/AUD_1987-01-14.csv")$Settle))
ts.plot(read.csv("data_chosen/AUD_returns_1987-01-15.csv")$Settle)
ts.plot(read.csv("data_chosen/AUD_returns_1987-01-15.csv")$Settle)
ts.plot(getReturns(read.csv("data_chosen/AUD_1987-01-14.csv")$Settle))
ts.plot(read.csv("data_chosen/AUD_1987-01-14.csv")$Settle)
is.xts(getReturns(RAW.data.xts))
getReturns(RAW.data.xts)$Date
getReturns(RAW.data.xts)$
getReturns(RAW.data.xts)
index(getReturns(RAW.data.xts))
getReturns(RAW.data.xts)
getReturns(RAW.data.xts)[,1]
getReturns(RAW.data.xts)
str(getReturns(RAW.data.xts()))
getReturns(RAW.data.xts)
head(getReturns(RAW.data.xts))
str(getReturns(RAW.data.xts))
getReturns(RAW.data.xts)$chr
getReturns(RAW.data.xts)$[1:10]
getReturns(RAW.data.xts)[1:10]
index(getReturns(RAW.data.xts))
getReturns(RAW.data.xts)
is.xts(getReturns(RAW.data.xts))
class(getReturns(RAW.data.xts))
as.xts(getReturns(RAW.data.xts))
plot.xts(as.xts(getReturns(RAW.data.xts)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/Portfolio/")
Data.Path <- "/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/data_chosen/"
setwd("/Users/davidkuchelmeister/")
source("Studium/Bachelor Arbeit/Datenreihen/Load_Data.R")
Data.Path <- "/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/data_chosen/"
ret.cc <- Load_Data(Data.Path,zugeschnitten = T,returns = T,return.normal.Data = F)
ret.cc
Data.Path <- "/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/data_chosen/"
ret.cc <- Load_Data(Data.Path,zugeschnitten = T,returns = T,return.normal.Data = F)
source("Studium/Bachelor Arbeit/Datenreihen/Load_Data.R")
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/Portfolio/")
source("Efficient/efficient_anwenden.R")
source("Equal Weights/equal_weights_anwenden.R")
source("Global Min/global_min_anwenden.R")
source("Max Decorrelation/max_decorrelation_anwenden.R")
source("Tangency/tangency_anwenden.R")
Data.Path <- "/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/data_chosen/"
efficient <- efficient_anwenden(Data.Path,backtest.length); print("efficient Portfolio loaded")
backtest.length = 100
efficient <- efficient_anwenden(Data.Path,backtest.length); print("efficient Portfolio loaded")
equal <- euqal_weights(Data.Path,backtest.length); print("equal Portfolio loaded")
global.min <- global_min_anwenden(Data.Path,backtest.length); print("global.min Portfolio loaded")
tangency <- tangency_anwenden(Data.Path,backtest.length); print("tangency Portfolio loaded")
max.decorrelation <- max_decorrelation_anwenden(Data.Path,backtest.length); print("max.decorrelation Portfolio loaded")
backtest.length = 4000
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/")
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/Portfolio/")
source("Load_Data.R")
calcualte_portfolios <- function(backtest.length = 4000, plot_returns = F, save_csv = F){
# Folder where the Portfolio global folder is saved
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/Portfolio/")
source("Load_Data.R")
source("functions.R")
source("Efficient/efficient_anwenden.R")
source("Equal Weights/equal_weights_anwenden.R")
source("Global Min/global_min_anwenden.R")
source("Max Decorrelation/max_decorrelation_anwenden.R")
source("Tangency/tangency_anwenden.R")
Data.Path <- "/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/data_chosen/"
efficient <- efficient_anwenden(Data.Path,backtest.length); print("efficient Portfolio loaded")
equal <- euqal_weights(Data.Path,backtest.length); print("equal Portfolio loaded")
global.min <- global_min_anwenden(Data.Path,backtest.length); print("global.min Portfolio loaded")
tangency <- tangency_anwenden(Data.Path,backtest.length); print("tangency Portfolio loaded")
max.decorrelation <- max_decorrelation_anwenden(Data.Path,backtest.length); print("max.decorrelation Portfolio loaded")
mat <- merge.xts(efficient$returns,equal$returns,global.min$returns,tangency$returns,max.decorrelation$returns)
mat_cumsum <- merge.xts(cumsum(efficient$returns),cumsum(equal$returns),cumsum(global.min$returns),cumsum(tangency$returns),cumsum(max.decorrelation$returns))
if(plot_returns){
matplot(mat_cumsum,type="l",lty =  1)
abline(h = 0)
legend("topleft",
lty=c(1,1),
lwd=1,col=1:ncol(mat_cumsum),
legend = colnames(mat_cumsum),
cex = 0.8
)
}
setwd("/Users/davidkuchelmeister/")
if(save_csv){
write.csv(x = efficient$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/efficient.csv",
row.names = index(efficient$returns))
write.csv(x = equal$returns,file = "Studium/Bachelor Arbeit/Shiny David test/data_strategies/equal.csv",
row.names = index(efficient$returns))
write.csv(x = global.min$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/global.min.csv",
row.names = index(efficient$returns))
write.csv(x = max.decorrelation$returns, file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/max.decorrelation.csv",
row.names = index(efficient$returns))
write.csv(x = tangency$returns,file =
"Studium/Bachelor Arbeit/Shiny David test/data_strategies/tangency.csv",
row.names = index(efficient$returns))
}
}
# portfolios <- calcualte_portfolios(backtest.length = 4000,plot_returns = T,save_csv = T)
portfolios <- calcualte_portfolios(backtest.length = 4000,plot_returns = T,save_csv = T)
calcualte_portfolios <- function(backtest.length = 4000, plot_returns = F, save_csv = F){
# Folder where the Portfolio global folder is saved
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/Portfolio/")
source("Load_Data.R")
source("functions.R")
source("Efficient/efficient_anwenden.R")
source("Equal Weights/equal_weights_anwenden.R")
source("Global Min/global_min_anwenden.R")
source("Max Decorrelation/max_decorrelation_anwenden.R")
source("Tangency/tangency_anwenden.R")
Data.Path <- "/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/data_chosen/"
efficient <- efficient_anwenden(Data.Path,backtest.length); print("efficient Portfolio loaded")
equal <- euqal_weights(Data.Path,backtest.length); print("equal Portfolio loaded")
global.min <- global_min_anwenden(Data.Path,backtest.length); print("global.min Portfolio loaded")
tangency <- tangency_anwenden(Data.Path,backtest.length); print("tangency Portfolio loaded")
max.decorrelation <- max_decorrelation_anwenden(Data.Path,backtest.length); print("max.decorrelation Portfolio loaded")
mat <- merge.xts(efficient$returns,equal$returns,global.min$returns,tangency$returns,max.decorrelation$returns)
mat_cumsum <- merge.xts(cumsum(efficient$returns),cumsum(equal$returns),cumsum(global.min$returns),cumsum(tangency$returns),cumsum(max.decorrelation$returns))
if(plot_returns){
matplot(mat_cumsum,type="l",lty =  1)
abline(h = 0)
legend("topleft",
lty=c(1,1),
lwd=1,col=1:ncol(mat_cumsum),
legend = colnames(mat_cumsum),
cex = 0.8
)
}
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/data_strategies/")
if(save_csv){
write.csv(x = efficient$returns,file = "/efficient.csv", row.names = index(efficient$returns))
write.csv(x = equal$returns,file = "/equal.csv", row.names = index(efficient$returns))
write.csv(x = global.min$returns,file = "/global.min.csv", row.names = index(efficient$returns))
write.csv(x = max.decorrelation$returns, file = "/max.decorrelation.csv",row.names = index(efficient$returns))
write.csv(x = tangency$returns,file = "/tangency.csv", row.names = index(efficient$returns))
}
}
portfolios <- calcualte_portfolios(backtest.length = 100,plot_returns = T,save_csv = F)
calcualte_portfolios <- function(backtest.length = 4000, plot_returns = F, save_csv = F){
# Folder where the Portfolio global folder is saved
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/Portfolio/")
source("Load_Data.R")
source("functions.R")
source("Efficient/efficient_anwenden.R")
source("Equal Weights/equal_weights_anwenden.R")
source("Global Min/global_min_anwenden.R")
source("Max Decorrelation/max_decorrelation_anwenden.R")
source("Tangency/tangency_anwenden.R")
Data.Path <- "/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/data_chosen/"
efficient <- efficient_anwenden(Data.Path,backtest.length); print("efficient Portfolio loaded")
equal <- euqal_weights(Data.Path,backtest.length); print("equal Portfolio loaded")
global.min <- global_min_anwenden(Data.Path,backtest.length); print("global.min Portfolio loaded")
tangency <- tangency_anwenden(Data.Path,backtest.length); print("tangency Portfolio loaded")
max.decorrelation <- max_decorrelation_anwenden(Data.Path,backtest.length); print("max.decorrelation Portfolio loaded")
mat <- merge.xts(efficient$returns,equal$returns,global.min$returns,tangency$returns,max.decorrelation$returns)
mat_cumsum <- merge.xts(cumsum(efficient$returns),cumsum(equal$returns),cumsum(global.min$returns),cumsum(tangency$returns),cumsum(max.decorrelation$returns))
if(plot_returns){
matplot(mat_cumsum,type="l",lty =  1)
abline(h = 0)
legend("topleft",
lty=c(1,1),
lwd=1,col=1:ncol(mat_cumsum),
legend = colnames(mat_cumsum),
cex = 0.8
)
}
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny David test/data_strategies/")
if(save_csv){
write.csv(x = efficient$returns,file = "/efficient.csv", row.names = index(efficient$returns))
write.csv(x = equal$returns,file = "/equal.csv", row.names = index(efficient$returns))
write.csv(x = global.min$returns,file = "/global.min.csv", row.names = index(efficient$returns))
write.csv(x = max.decorrelation$returns, file = "/max.decorrelation.csv",row.names = index(efficient$returns))
write.csv(x = tangency$returns,file = "/tangency.csv", row.names = index(efficient$returns))
}
return("Calculations finished")
}
# portfolios <- calcualte_portfolios(backtest.length = 4000,plot_returns = T,save_csv = T)
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
calculating <- "Text"
calculating
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
portfolios <- calcualte_portfolios(backtest.length = 100,plot_returns = T,save_csv = F)
portfolios
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
runApp('~/Studium/Bachelor Arbeit/Shiny David test')
