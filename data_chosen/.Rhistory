# save the dates when the algorithm trades and how much
trading_dates <- xts(rowSums(abs(sign(Weights)),na.rm = T),order.by = index(Weights))
# create a list with trading information about when and how much to invest into which index
trade_info <- list()
for(i in 1:ncol(Weights)){
save_list <- data.frame(trade_time[[i]],Money_input*as.numeric(na.exclude(Weights[,i])))
colnames(save_list) <- c("Trade Date","Inserted money")
trade_info[[i]] <- save_list
}
names(trade_info) <- colnames(Weights)
spent_on_trading <- data.frame(sum(trading_dates), sum(trading_dates)*trading.costs, sum(trading_dates)*trading.costs/Money_input)
colnames(spent_on_trading) <- c("Amount of trades","Spent money on trades", "Percentage of invested money spent on trades")
list(returns_cost,weights_over_time,trade_info,spent_on_trading)
spent_on_trading
trade_info
trade.speed = 0.01
trade_time <- Transactioncosts_date_finder(Weights,trade.speed)
names(trade_time) <- colnames(Weights)
# All days in wich no trade is made will be set to NA
for(i in 1:ncol(Weights)) Weights[!(index(Weights) %in% trade_time[[i]]),i] <- NA
# the costs rise, becuase they are growing over time and the last returns don't have any influence from the first costs in the calculations.
cost_vector <- cumsum(rowSums(abs(sign(Weights)),na.rm = T))
# the weights only change at the trade_time days
trade_time <- Transactioncosts_date_finder(Weights,trade.speed)
trade.speed
Weights
Weights <- portfolio[[1]]
trade_time <- Transactioncosts_date_finder(Weights,trade.speed)
names(trade_time) <- colnames(Weights)
# All days in wich no trade is made will be set to NA
for(i in 1:ncol(Weights)) Weights[!(index(Weights) %in% trade_time[[i]]),i] <- NA
# the costs rise, becuase they are growing over time and the last returns don't have any influence from the first costs in the calculations.
cost_vector <- cumsum(rowSums(abs(sign(Weights)),na.rm = T))
# the weights only change at the trade_time days
# weights_trade_days <- list()
# for(i in 1:ncol(Weights)) weights_trade_days[[i]] <- merge.xts(xts(order.by = index(Weights)), Weights[index(Weights) %in% trade_time[[i]], i ])
if(ncol(RAW.Data) > ncol(Weights)){
colnames(RAW.Data) <- gsub("-", ".", colnames(RAW.Data))
colnames(Weights) <- gsub("-", ".", colnames(Weights))
RAW.Data.Cut <- RAW.Data[index(Weights),colnames(RAW.Data) %in% colnames(Weights)]
}else{
RAW.Data.Cut <- RAW.Data[index(Weights),]
}
weights_over_time <- na.locf(Weights)
# the weights are multiplied with the input Money and multiplied with the RAW data where it is invested
# after we have the prices over time, we'll subtract the costs over time
volume_cost_ontradetimes <- cumsum(rowSums(weights_over_time * RAW.Data.Cut)) - (cost_vector * trading.costs)
ret <- rowSums(Weights10 * RAW.Data.Cut)
volume_cost_ontradetimes <- cumsum(rowSums(weights_over_time * RAW.Data.Cut))
return1 <- diag(RAW.Data.Cut %*% t(weights_over_time))
# make an xts from the return data
volume_cost <- xts(volume_cost_ontradetimes, order.by = index(Weights))
returns_cost <- diff(log(volume_cost + Money_input))[-1,]
# save the dates when the algorithm trades and how much
trading_dates <- xts(rowSums(abs(sign(Weights)),na.rm = T),order.by = index(Weights))
# create a list with trading information about when and how much to invest into which index
trade_info <- list()
for(i in 1:ncol(Weights)){
save_list <- data.frame(trade_time[[i]],Money_input*as.numeric(na.exclude(Weights[,i])))
colnames(save_list) <- c("Trade Date","Inserted money")
trade_info[[i]] <- save_list
}
names(trade_info) <- colnames(Weights)
spent_on_trading <- data.frame(sum(trading_dates), sum(trading_dates)*trading.costs, sum(trading_dates)*trading.costs/Money_input)
colnames(spent_on_trading) <- c("Amount of trades","Spent money on trades", "Percentage of invested money spent on trades")
spent_on_trading
trade_info
weights_over_time
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
trade_info
names(trade_info) <- colnames(Weights)
trade_info
summary(trade_info)
trade_info[[1]]
trade_info[[2]]
reduce(merge.xts, trade_info)
reduce
library(rugarch)
library(rugarch)
reduce(merge.xts, trade_info)
trade_info
reduce(cbind, trade_info)
reduce(cbind, trade_info)
reduce(c, trade_info)
trade_info
trade_info[[1]]
reduce(cbind, trade_info)
reduce(merge.xts, trade_info)
unlist(data)
unlist(trade_info)
hist(unlist(trade_info))
index(unlist(trade_info))
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
reduce(merge.xts, trade_info)
trade_info
reduce(merge, trade_info)
unlist(trade_info)
trade_info[[i]][,1]
i
i <- 1
trade_info[[i]][,1]
sapply(1:length(trade_info) ) trade_info[[i]][,1]
length(trade_info)
1:length(trade_info)
sapply(1:length(trade_info), function(i) trade_info[[i]][,1]
sapply(1:length(trade_info), function(i) trade_info[[i]][,1])
hist(sapply(1:length(trade_info), function(i) trade_info[[i]][,1]))
dates <- sapply(1:length(trade_info), function(i) trade_info[[i]][,1])
cumsum(dates)
as.numeric(dates)
dates
as.numeric(as.dates(dates))
as.numeric(as.Dates(dates))
as.numeric(as.Date(dates))
as.Date(dates)
dates <- sapply(1:length(trade_info), function(i) trade_info[[i]][,1])
dates
str(dates)
dates
dates[[1]]
reduce(merge,dates[[1]])
reduce(cbind,dates[[1]])
cumsum_tradecosts <- data.frame()
cumsum_tradecosts <- data.frame()
for(i in 1:length(trade_info)){
cumsum_tradecosts <- c(cumsum_tradecosts,trade_info[[i]][,1]))
}
cumsum_tradecosts <- data.frame()
for(i in 1:length(trade_info)){
cumsum_tradecosts <- c(cumsum_tradecosts,trade_info[[i]][,1]))
cumsum_tradecosts <- c(cumsum_tradecosts,trade_info[[i]][,1]))
cumsum_tradecosts <- data.frame()
for(i in 1:length(trade_info)){
cumsum_tradecosts <- c(cumsum_tradecosts,trade_info[[i]][,1])
}
cumsum_tradecosts
cumsum_tradecosts
cumsum_tradecosts <- data.frame()
trade_info[[i]][,1]
c(trade_info[[i]][,1],trade_info[[i]][,2])
trade_info[[i]][,2]
trade_info[[1]][,1]
c(trade_info[[1]][,1],trade_info[[2]][,1])
1:length(trade_info)
cumsum_tradecosts <- data.frame()
for(i in 1:length(trade_info)){
cumsum_tradecosts <- c(cumsum_tradecosts,trade_info[[i]][,1])
}
cumsum_tradecosts
cumsum_tradecosts
cumsum_tradecosts <- data.frame()
1:length(trade_info)
c(cumsum_tradecosts,trade_info[[i]][,1])
cumsum_tradecosts
cumsum_tradecosts
trade_info[[i]][,1]
c(cumsum_tradecosts,trade_info[[i]][,1])
cumsum_tradecosts <- matrix()
for(i in 1:length(trade_info)){
cumsum_tradecosts <- c(cumsum_tradecosts,trade_info[[i]][,1])
}
cumsum_tradecosts
c(cumsum_tradecosts,trade_info[[i]][,1])
cumsum_tradecosts <- date()
for(i in 1:length(trade_info)){
cumsum_tradecosts <- c(cumsum_tradecosts,trade_info[[i]][,1])
}
cumsum_tradecosts
cumsum_tradecosts <- character()
for(i in 1:length(trade_info)){
cumsum_tradecosts <- c(cumsum_tradecosts,trade_info[[i]][,1])
}
cumsum_tradecosts
cumsum_tradecosts <- character()
cumsum_tradecosts
c(cumsum_tradecosts,trade_info[[i]][,1])
trade_info[[i]][,1]
merge(cumsum_tradecosts,trade_info[[i]][,1])
cumsum_tradecosts <- data.frame()
for(i in 1:length(trade_info)){
merge(cumsum_tradecosts,trade_info[[i]][,1])
cumsum_tradecosts
trade_info[[i]][,1]
trade_info[[i]][,1]
cumsum_tradecosts$i
cumsum_tradecosts$i <- trade_info[[i]][,1]
cumsum_tradecosts$i <- trade_info[[i]][,1]
trade_info[[i]][,1]
merge(trade_info[[1]][,1],trade_info[[2]][,1])
merge(trade_info[[1:length(trade_info)]][,1])
cumsum_tradecosts <- merge(trade_info[[1]][,1],trade_info[[2]][,1])
cumsum_tradecosts
cumsum_tradecosts <- trade_info[[1]][,1]
for(i in 2:length(trade_info)){
cumsum_tradecosts <- merge(cumsum_tradecosts,trade_info[[i]][,1])
}
cumsum_tradecosts
2:length(trade_info)
cumsum_tradecosts <- trade_info[[1]][,1]
cumsum_tradecosts
merge(cumsum_tradecosts,trade_info[[i]][,1])
trade_info[[i]][,1]
i
i <- 2
cumsum_tradecosts <- trade_info[[1]][,1]
cumsum_tradecosts <- merge(cumsum_tradecosts,trade_info[[i]][,1])
cumsum_tradecosts
for(i in 2:length(trade_info)){
cumsum_tradecosts <- merge(cumsum_tradecosts,trade_info[[i]][,1])
}
cumsum_tradecosts
cumsum_tradecosts <- trade_info[[1]][,1]
for(i in 2:length(trade_info)){
cumsum_tradecosts <- merge(cumsum_tradecosts,trade_info[[i]][,1])
}
cumsum_tradecosts
trade_info
trade_info[[i]][,1]
i
i <- 1
trade_info[[i]][,1]
c(trade_info[[1]][,1],trade_info[[2]][,1])
cumsum_costs <- trade_info[[1]][,1]
cumsum_costs
cumsum_costs <- c(cumsum_costs,trade_info[[i]][,1])
cumsum_costs
for(i in 2:length(trade_info)){
cumsum_costs <- c(cumsum_costs,trade_info[[i]][,1])
}
cumsum_costs
cumsum_costs <- trade_info[[1]][,1]
for(i in 2:length(trade_info)){
cumsum_costs <- c(cumsum_costs,trade_info[[i]][,1])
}
cumsum_costs
str(cumsum_costs)
hist(cumsum_costs)
hist(as.numeric(cumsum_costs))
cumsum_costs
hist(as.numeric(cumsum_costs),axes=F)
axis(2,cumsum_costs)
axis(1)
cumsum_costs
as.numeric(cumsum_costs)
cumsum_costs
cumsum_costs = 1
cumsum_costs
cumsum_costs <- trade_info[[1]][,1]
for(i in 2:length(trade_info)){
cumsum_costs <- c(cumsum_costs,trade_info[[i]][,1])
}
cumsum_costs
xts(1:length(cumsum_costs),order.by = cumsum_costs)
xts(rep(trading.costs,length(cumsum_costs)),order.by = cumsum_costs)
trading.costs
trading.costs <- 1
xts(rep(trading.costs,length(cumsum_costs)),order.by = cumsum_costs)
cost_time_vector <- xts(rep(trading.costs,length(cumsum_costs)),order.by = cumsum_costs)
cumsum(cost_time_vector)
spent_on_trading
ts.plot(cumsum(cost_time_vector))
cumsum(cost_time_vector)
plot.xts(cumsum(cost_time_vector))
hist(cumsum(cost_time_vector))
hist((cost_time_vector))
plot.xts
plot.xts(cumsum(cost_time_vector))
cost_time_vector
hist(cost_time_vector)
hist(cost_time_vector,breaks = 100)
plot.xts(cumsum(cost_time_vector))
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
portfolio_transactioncost
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
cumsum_costs <- trade_info[[1]][,1]
for(i in 2:length(trade_info)){
cumsum_costs <- c(cumsum_costs,trade_info[[i]][,1])
}
cost_time_vector
plot.xts(cumsum(cost_time_vector))
cost_time_vector
cost_time_vector
last(Weights)
rbind(cost_time_vector,xts(0,order.by = index(last(Weights))))
cost_time_vector <- xts(rep(trading.costs,length(cumsum_costs)),order.by = cumsum_costs)
rbind(cost_time_vector,xts(0,order.by = index(last(Weights))))
plot.xts(cumsum(cost_time_vector))
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
tradingcosts_time
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
is.null
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
portfolio_transactioncost
returns_cost
ts.plot(exp(cumsum(returns_cost)))
volume_cost_ontradetimes <- cumsum(rowSums(weights_over_time * RAW.Data.Cut)) - (cost_vector * trading.costs)
volume_cost_ontradetimes
volume_cost_ontradetimes
volume_cost_ontradetimes
lag.xts(RAW.Data)
return1
return1 <-  rowSums(weights_xts * na.fill(lag.xts(RAW.Data[index(weights_xts),],(-lag_days)+1),0))
return1
return1 <-  rowSums(weights_over_time * na.fill(lag.xts(RAW.Data.Cut[index(weights_over_time),],(-lag_days)+1),0))
return1
return1 <- diag(RAW.Data.Cut %*% t(weights_over_time))
return1
return1
return1
ts.plot(volume_cost_ontradetimes)
if(ncol(RAW.Data) > ncol(Weights)){
colnames(RAW.Data) <- gsub("-", ".", colnames(RAW.Data))
colnames(Weights) <- gsub("-", ".", colnames(Weights))
RAW.Data.Cut <- RAW.Data[index(Weights),colnames(RAW.Data) %in% colnames(Weights)]
}else{
RAW.Data.Cut <- RAW.Data[index(Weights),]
}
weights_over_time
trade_time <- Transactioncosts_date_finder(Weights,trade.speed)
names(trade_time) <- colnames(Weights)
# All days in wich no trade is made will be set to NA
for(i in 1:ncol(Weights)) Weights[!(index(Weights) %in% trade_time[[i]]),i] <- NA
# the costs rise, because they are growing over time and the last returns don't have any influence from the first costs in the calculations.
cost_vector <- cumsum(rowSums(abs(sign(Weights)),na.rm = T))
# sort the unused indeces out of the raw data
if(ncol(RAW.Data) > ncol(Weights)){
colnames(RAW.Data) <- gsub("-", ".", colnames(RAW.Data))
colnames(Weights) <- gsub("-", ".", colnames(Weights))
RAW.Data.Cut <- RAW.Data[index(Weights),colnames(RAW.Data) %in% colnames(Weights)]
}else{
RAW.Data.Cut <- RAW.Data[index(Weights),]
}
# Fill NA's in weights with the last possible value
weights_over_time <- na.locf(Weights)
return1 <-  rowSums(weights_over_time * na.fill(lag.xts(RAW.Data.Cut[index(weights_over_time),],(-lag_days)+1),0))
return1
volume_cost_ontradetimes <- cumsum(rowSums(weights_over_time * RAW.Data.Cut)) - (cost_vector * trading.costs)
volume_cost_ontradetimes
### Transactioncosts_anwenden
# this functions adds transaction costs to a portoflio input
# it calculates returns, weights and the dates when to trade
###### Sub function ############
#
# Weights           = the weights of the protfolio
# trade.speed       = the speed with which the portoflio should be traded
Transactioncosts_date_finder <- function(Weights, trade.speed = 0.1){
# go over the weights everytime the overall change in the weights exceeds a certain level
# the strategy will save the row of the weights and restart from the new date on
invest_positions <- lapply(1:ncol(Weights), function(j){
invest_tracker <- numeric()
save_Weights <- Weights[1,j]
Weights_column <- Weights[,j]
for(i in 1:nrow(Weights_column)){
if(abs(as.numeric(Weights_column[i]) - as.numeric(save_Weights)) > trade.speed){
save_Weights <- Weights_column[i]
invest_tracker <- c(invest_tracker,i)
}
}
# the first day needs to be included as investing day
c(1,invest_tracker)
})
# find the dates of the changes
trade_time <- lapply(1:length(invest_positions), function(i) index(Weights[invest_positions[[i]],]))
}
###### Main function ############
#
# Money_input       = How much money are you investing?
# RAW.Data          = the indeces in which you want to invest
# Weights           = the weights of the protfolio you've calculated
# trade.speed       = the speed with which the portoflio should be traded
#                     after how much change in the weights should the strategy reinvest?
# tradingcosts      = The costs that get payed for every trade
Transactioncosts_anwenden <- function(Money_input = 1000000, RAW.Data, Weights, trade.speed = 0.1, trading.costs = 0.1){
# Calculate the times, when the trades will occur
trade_time <- Transactioncosts_date_finder(Weights,trade.speed)
names(trade_time) <- colnames(Weights)
# All days in wich no trade is made will be set to NA
for(i in 1:ncol(Weights)) Weights[!(index(Weights) %in% trade_time[[i]]),i] <- NA
# the costs rise, because they are growing over time and the last returns don't have any influence from the first costs in the calculations.
cost_vector <- cumsum(rowSums(abs(sign(Weights)),na.rm = T))
# sort the unused indeces out of the raw data
if(ncol(RAW.Data) > ncol(Weights)){
colnames(RAW.Data) <- gsub("-", ".", colnames(RAW.Data))
colnames(Weights) <- gsub("-", ".", colnames(Weights))
RAW.Data.Cut <- RAW.Data[index(Weights),colnames(RAW.Data) %in% colnames(Weights)]
}else{
RAW.Data.Cut <- RAW.Data[index(Weights),]
}
# Fill NA's in weights with the last possible value
weights_over_time <- na.locf(Weights)
# the weights are multiplied with the input Money and multiplied with the RAW data where it is invested
# after we have the prices over time, we'll subtract the costs over time
# volume_cost_ontradetimes <- cumsum(rowSums(weights_over_time * RAW.Data.Cut)) - (cost_vector * trading.costs)
# ret <- rowSums(Weights10 * RAW.Data.Cut)
#
# volume_cost_ontradetimes <- cumsum(rowSums(weights_over_time * RAW.Data.Cut))
# Calculations of the
returns_cost <-  rowSums(weights_over_time * na.fill(lag.xts(RAW.Data.Cut[index(weights_over_time),],(-lag_days)+1),0))
# make an xts from the return data
# volume_cost <- xts(volume_cost_ontradetimes, order.by = index(Weights))
# returns_cost <- diff(log(volume_cost + Money_input))[-1,]
# save the dates when the algorithm trades and how much
trading_dates <- xts(rowSums(abs(sign(Weights)),na.rm = T),order.by = index(Weights))
# create a list with trading information about when and how much to invest into which index
trade_info <- list()
for(i in 1:ncol(Weights)){
save_list <- data.frame(trade_time[[i]],Money_input*as.numeric(na.exclude(Weights[,i])))
colnames(save_list) <- c("Trade Date","Inserted money")
trade_info[[i]] <- save_list
}
names(trade_info) <- colnames(Weights)
spent_on_trading <- data.frame(sum(trading_dates), sum(trading_dates)*trading.costs, sum(trading_dates)*trading.costs/Money_input)
colnames(spent_on_trading) <- c("Amount of trades","Spent money on trades", "Percentage of invested money spent on trades")
# Calculate the trading costs over time
cumsum_costs <- trade_info[[1]][,1]
for(i in 2:length(trade_info)){
cumsum_costs <- c(cumsum_costs,trade_info[[i]][,1])
}
cost_time_vector <- xts(rep(trading.costs,length(cumsum_costs)),order.by = cumsum_costs)
rbind(cost_time_vector,xts(0,order.by = index(last(Weights))))
# plot.xts(cumsum(cost_time_vector))
return(list(returns_cost,weights_over_time,trade_info,spent_on_trading,cost_time_vector))
}
Weights <- portfolio[[1]]
trade.speed = 0.01
trading.costs = 1
Money_input = 1000000
A <- Transactioncosts_anwenden(Money_input = 100000,RAW.Data = RAW_Data,Weights = portfolio[[1]],trade.speed = 0.000001,trading.costs = 0)
ts.plot(A[[1]])
ts.plot(exp(cumsum(A[[1]])))
returns_cost
is.xts(returns_cost)
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
returns_raw
returns_raw <-  rowSums(weights_over_time * na.fill(lag.xts(RAW.Data.Cut[index(weights_over_time),],(-lag_days)+1),0))
returns_raw
RAW.Data.Cut
returns_cost <- xts(returns_raw, order.by = index(RAW.Data.Cut))
returns_cost
ts.plot(returns_cost)
ts.plot(EXP(CUMSUM(returns_cost)))
ts.plot(exp(cumsum(returns_cost)))
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
rowSums(weights_over_time * na.fill(RAW.Data.Cut[index(weights_over_time),],0))
rowSums(weights_over_time * na.fill(RAW.Data.Cut[index(weights_over_time),],0)) - (cost_vector * trading.costs)
trading.costs
cost_vector
source('~/Studium/Bachelor Arbeit/Shiny_App/Transaction_costs/Transactioncosts_anwenden.R')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
rowSums(weights_over_time * na.fill(RAW.Data.Cut[index(weights_over_time),],0))
source('~/Studium/Bachelor Arbeit/Shiny_App/Transaction_costs/Transactioncosts_anwenden.R')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
source('~/Studium/Bachelor Arbeit/Shiny_App/Transaction_costs/Transactioncosts_anwenden.R')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
Weights
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
runApp('~/Studium/Bachelor Arbeit/Shiny_App')
