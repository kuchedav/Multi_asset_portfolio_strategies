shiny::runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
shiny::runApp('Studium/Bachelor Arbeit/Shiny App exe/Shiny')
runApp('Studium/Bachelor Arbeit/Shiny App exe/Shiny')
shiny::runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
### global_min_anwenden function calculates the global Minimum Portfolio
# Input
# RAW.Data = xts Matrix of returns of indices
# Lookback_distance = the amount of days that will be calculated, from today into the past.
# lag_days = amount of days the algorythm waits until it buys the indeces (1 is standart, to wait until tomorrow)
# Output
# List of two Matrixes,
# first contains a xts matrix with all weights over the calculated period of time per index
# second list contains an xts vector of the portfolio returns
min.vola_anwenden <- function(RAW.Data, Lookback_distance = 100, lag_days = 1){
N <- Lookback_distance # max = 4000
#### Create global min Portfolio ###
eff.port.list3 <- list()
### Multi Core
require(parallel)
require(doMC)
registerDoMC(cores=detectCores())
global_min_function <- function(RAW.Data,i){
ret.cc3 <- RAW.Data[1:(nrow(RAW.Data)-i),]
mu.hat.annual = apply(ret.cc3, 2, mean)
cov.mat.annual = cov(ret.cc3)
effi.port = globalMin.portfolio(er = mu.hat.annual,cov.mat =  cov.mat.annual)
eff.port.list3[[i]] <- effi.port
}
eff.port.list3 <- foreach(n = 1:N) %dopar% global_min_function(RAW.Data,n)
weights3 <- sapply(N:1, function(i) eff.port.list3[[i]]$weights)
weights_xts <- xts(t(weights3),order.by = index(RAW.Data[nrow(RAW.Data):(nrow(RAW.Data)-(N-1)),]) )
# Calculate the Portfolio returns with the weights and raw data
return <- CalculatePortfolioReturns(RAW.Data,weights_xts,lag_days)
return(list(weights=weights_xts,returns=return))
}
### Example
# library(xts)
# length <- 20000
# cols <- 20
# lookback <- 100
#
# data <- as.xts(matrix(rnorm(length),ncol=cols), order.by = as.Date(1:(length/cols))) # Generate normal dist. data
# colnames(data) <- c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20") # puts Index names from 1 - 20
# matplot(data, type = "l")
#
#
# portfolio <- min.vola_anwenden(data,lookback) # call the function above with random normal dist. for testing
#
# Lookback_distance <- 2000
# portfolio <- min.vola_anwenden(RAW.Data,Lookback_distance) # call the function above with random normal dist. for testing
#
# matplot(portfolio[[1]], type ="l") # plot the weights of the portfolio
# plot(portfolio[[2]]) # plot the returns of the portfolio
# hist(portfolio[[2]], breaks = 100) # histogram of the returns
sum(matrix(rep(1,4),ncol=4))
matrix(rep(1,4),ncol=4)
matrix(rep(1,4),ncol=2)
sum(matrix(rep(1,4),ncol=2))
?%o%
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
runApp('Studium/Bachelor Arbeit/Shiny_App_weiter')
install.packages("Rdonlp2")
shiny::runApp('Studium/Bachelor Arbeit/Shiny_App')
shiny::runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
install.packages(c("gamlss", "gamlss.data", "gamlss.dist", "git2r", "h2o", "jsonlite", "nlme", "openssl", "quantreg", "Rcpp", "RcppArmadillo", "robustbase", "stringi", "survival"))
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/ARCHIV/Shiny_App_ALT')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
runApp('Studium/Bachelor Arbeit/Shiny_App')
length <- 200000
cols <- 20
lookback <- 1000 # takes about 10 secends for each day ( 100 days -> ~15 min)
data <- as.xts(matrix(rnorm(length),ncol=cols), order.by = as.Date(1:(length/cols))) # Generate normal dist. data
colnames(data) <- c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20") # puts Index names from 1 - 20
matplot(data, type = "l")
# need of the Efficiency function
eff.pf <- efficient_anwenden(data,5000)
eff.pf <- efficient_anwenden(RAW.Total,5000)
w <- eff.pf[[1]]
r <- eff.pf[[2]]
matplot(w, type = "l")
plot(r)
rp.anwenden <-RiskParity_anwenden(Weights = w, PortfolioReturns = r, TargetVola = 0.2, Lookback = 200)
targetvola_weights <- WeightsAfterRiskParity <- rp.anwenden
returnsAfterRP <- WeightsAfterRiskParity * as.matrix(data[(length(data[,1])+1-length(WeightsAfterRiskParity[,1])):length(data[,1]),])
matplot(data, type = "l")
plot(rowSums(returnsAfterRP),type="l")
sd(rowSums(returnsAfterRP))
plot(rollapplyr(rowSums(returnsAfterRP), 10, sd)*sqrt(250),type = "l")
mean(rollapplyr(rowSums(returnsAfterRP), 10, sd)*sqrt(250),type = "l")
colSums(rp.anwenden)
length <- 200000
cols <- 20
lookback <- 1000 # takes about 10 secends for each day ( 100 days -> ~15 min)
data <- as.xts(matrix(rnorm(length),ncol=cols), order.by = as.Date(1:(length/cols))) # Generate normal dist. data
colnames(data) <- c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20") # puts Index names from 1 - 20
matplot(data, type = "l")
# need of the Efficiency function
eff.pf <- efficient_anwenden(data,5000)
eff.pf <- efficient_anwenden(RAW.Total,5000)
w <- eff.pf[[1]]
setwd("Studium/Bachelor Arbeit/Shiny_App/")
source("Portfolio/Strategies/efficient_anwenden.R")
data
eff.pf <- efficient_anwenden(data,5000)
w <- eff.pf[[1]]
source("Portfolio/functions.R")
source("Portfolio/Strategies/efficient_anwenden.R")
eff.pf <- efficient_anwenden(data,5000)
source("global.R")
source("Portfolio/Strategies/efficient_anwenden.R")
eff.pf <- efficient_anwenden(data,5000)
matplot(w, type = "l")
w <- eff.pf[[1]]
### efficient_anwenden function calculates the Efficient Portfolio
# Input
# RAW.Data = xts Matrix of returns of indices
# Lookback_distance = the amount of days that will be calculated, from today into the past.
# lag_days = amount of days the algorythm waits until it buys the indeces (1 is standart, to wait until tomorrow)
#
# Output
# List of two Matrixes,
# first contains a xts matrix with all weights over the calculated period of time per index
# second list contains an xts vector of the portfolio returns
efficient_anwenden <- function(RAW.Data, Lookback_distance = 100,lag_days = 1){
N <- Lookback_distance
#### Create efficient Portfolio ###
eff.port.list1 <- list()
### Multi Core
require(parallel)
require(doMC)
registerDoMC(cores=detectCores())
efficient_function <- function(RAW.Data,i){
ret.cc1 <- RAW.Data[1:(nrow(RAW.Data)-i),] # Cut the Dataseries
mu.hat.annual = apply(ret.cc1, 2, mean)*250
cov.mat.annual = cov(ret.cc1)*250
effi.port = efficient.portfolio(er = mu.hat.annual,cov.mat =  cov.mat.annual,target.return =  0.1)
eff.port.list1[[i]] <- effi.port
}
eff.port.list1 <- foreach(n = 1:N) %dopar% efficient_function(RAW.Data,n)
weights1 <- sapply(N:1, function(i) eff.port.list1[[i]]$weights)
weights_xts <- xts(t(weights1),order.by = index(last(RAW.Data,ncol(weights1))))
# Calculate the Portfolio returns with the weights and raw data
return <- CalculatePortfolioReturns(RAW.Data,weights_xts,lag_days)
return(list(weights=weights_xts,returns=return))
}
### Test of the portfolio return calculation
# te <- lag.xts(RAW.Data[index(weights_xts),],0)
# PoR <- Return.portfolio(te, weights = weights_xts)
# plot.xts(exp(cumsum(PoR)))
#
# ts.plot(exp(cumsum(return)))
### Example
# library(xts)
# setwd("Studium/Bachelor Arbeit/Shiny_App/") # Path to shiny app
# source("Portfolio/functions.R")
# length <- 200000
# cols <- 20
# norm_matrix <- matrix(rnorm(length,mean = 1,sd = 10),ncol=cols)
# data <- as.xts(norm_matrix, order.by = Sys.Date()-(1:nrow(norm_matrix))) # Generate normal dist. data
# colnames(data) <- LETTERS[1:ncol(norm_matrix)] # puts Index names from 1 - 20
# matplot(data, type = "l")
#
# lookback <- 5000
# portfolio <- efficient_anwenden(data,lookback) # call the function above with random normal dist. for testing
#
# Lookback_distance <- 5000
# portfolio <- efficient_anwenden(RAW.Data,Lookback_distance) # call the function above with random normal dist. for testing
#
# matplot(portfolio[[1]], type ="l") # plot the weights of the portfolio
# plot(portfolio[[2]]) # plot the returns of the portfolio
# hist(portfolio[[2]], breaks = 100) # histogram of the returns
#
#
efficient_anwenden
data
data
eff.pf <- efficient_anwenden(data,5000)
source("global.R")
working_dir = getwd()
data.path <- paste(working_dir,"data_strategies",sep = "/")
raw.data.path <- file.path(working_dir,"data_chosen",sep = "/")
require(PerformanceAnalytics)
require(corrplot)
require(xtable)
require(futile.logger)
require(reader)
require(stockPortfolio)
require(timeSeries)
require(FRAPO)
# Used for the Parallel computing of the portfolios
require(parallel)
require(doMC)
# Sourcing other functions
source("Portfolio/calculate_portfolios.R")
source("Portfolio/Load_Data.R")
source("Target_vola/RiskParity_anwenden.R")
source("Transaction_costs/Transactioncosts_anwenden.R")
source("Portfolio/functions.R")
# If the Raw Data changes remember to change the "chosenRawData" in the UI file aswell
RAW_Data_input_names <- c("FTSE100_returns_1984-05-08"
,"Nikkei225_returns_1990-09-27"
,"SP500_returns_1982-04-23"
,"US_2Y_Note_returns_1990-06-26"
,"AUD_returns_1987-01-15"
,"GBP_returns_1975-02-18"
,"Cotton_returns_1972-08-24"
,"US_30Y_returns_1977-08-24"
,"CHF_returns_1975-02-18"
,"Brent_Crude_returns_1993-03-19"
,"Copper_returns_1959-07-07"
,"Heating_Oil_returns_bereinigt_1979-03-08"
,"Natural_Gas_returns_1990-04-05"
,"Platinum_returns_1969-01-06"
,"Gold_returns_1975-01-03"
,"Long_Gilt_returns_1990-08-21"
,"US_5Y_Note_returns_1988-05-24"
,"US_10Y_returns_1982-05-05")
# function to easily calculate the portfolio returns if the weights and raw data is given
CalculatePortfolioReturns <- function(RAW.Data, Weights, lag_days = 1){
if(ncol(RAW.Data) > ncol(Weights)){
colnames(RAW.Data) <- gsub("-", ".", colnames(RAW.Data))
colnames(Weights) <- gsub("-", ".", colnames(Weights))
RAW.Data.Cut <- RAW.Data[index(Weights),colnames(RAW.Data) %in% colnames(Weights)]
}else{
RAW.Data.Cut <- RAW.Data[index(Weights),]
}
return1 <-  rowSums(Weights * na.fill(lag.xts(RAW.Data.Cut[index(Weights),],(-lag_days)+1),0))
return <- xts(return1, order.by = index(Weights))
return(return)
}
# returns the calculated returns of the portfolio
source("Target_vola/RiskParity_anwenden.R")
# is neeeded for calculations
# function to easily calculate the portfolio returns if the weights and raw data is given
CalculatePortfolioReturns <- function(RAW.Data, Weights, lag_days = 1){
if(ncol(RAW.Data) > ncol(Weights)){
colnames(RAW.Data) <- gsub("-", ".", colnames(RAW.Data))
RAW.Data.Cut <- RAW.Data[index(Weights),]
}else{
RAW.Data.Cut <- RAW.Data[index(Weights),colnames(RAW.Data) %in% colnames(Weights)]
colnames(Weights) <- gsub("-", ".", colnames(Weights))
}
return1 <-  rowSums(Weights * na.fill(lag.xts(RAW.Data.Cut[index(Weights),],(-lag_days)+1),0))
return <- xts(return1, order.by = index(Weights))
return(return)
# returns the calculated returns of the portfolio
}
# need of the Efficiency function
# set the way to the shiny app
setwd("Studium/Bachelor Arbeit/Shiny_App/")
source("Portfolio/functions.R")
source("Portfolio/Strategies/efficient_anwenden.R")
eff.pf <- efficient_anwenden(data,5000)
setwd("Studium/Bachelor Arbeit/Shiny_App/")
w <- eff.pf[[1]]
r <- eff.pf[[2]]
matplot(w, type = "l")
plot(r)
rp.anwenden <-RiskParity_anwenden(Weights = w, PortfolioReturns = r, TargetVola = 0.2, Lookback = 200)
targetvola_weights <- WeightsAfterRiskParity <- rp.anwenden
returnsAfterRP <- WeightsAfterRiskParity * as.matrix(data[(length(data[,1])+1-length(WeightsAfterRiskParity[,1])):length(data[,1]),])
matplot(data, type = "l")
plot(rowSums(returnsAfterRP),type="l")
sd(rowSums(returnsAfterRP))
plot(rollapplyr(rowSums(returnsAfterRP), 10, sd)*sqrt(250),type = "l")
mean(rollapplyr(rowSums(returnsAfterRP), 10, sd)*sqrt(250),type = "l")
colSums(rp.anwenden)
### Transactioncosts_anwenden
# this functions adds transaction costs to a portoflio input
# it calculates returns, weights and the dates when to trade
###### Sub function ############
#
# Weights           = the weights of the protfolio
# trade.speed       = the speed with which the portoflio should be traded
Transactioncosts_date_finder <- function(Weights, trade.speed = 0.1){
# go over the weights everytime the overall change in the weights exceeds a certain level
# the strategy will save the row of the weights and restart from the new date on
invest_positions <- lapply(1:ncol(Weights), function(j){
invest_tracker <- numeric()
save_Weights <- Weights[1,j]
Weights_column <- Weights[,j]
# search step by step where the next fluctuation is which is bigger than te trade speed
# save the position (date) and restart
for(i in 1:nrow(Weights_column)){
if(abs(as.numeric(Weights_column[i]) - as.numeric(save_Weights)) > trade.speed){
save_Weights <- Weights_column[i]
invest_tracker <- c(invest_tracker,i)
}
}
# the first day needs to be included as investing day
c(1,invest_tracker)
})
# find the dates of the changes
trade_time <- lapply(1:length(invest_positions), function(i) index(Weights[invest_positions[[i]],]))
}
###### Main function ############
#
# Money_input       = How much money are you investing?
# RAW.Data          = the indeces in which you want to invest
# Weights           = the weights of the protfolio you've calculated
# trade.speed       = the speed with which the portoflio should be traded
#                     after how much change in the weights should the strategy reinvest?
# tradingcosts      = The costs that get payed for every trade
Transactioncosts_anwenden <- function(Money_input = 1000000, RAW.Data, Weights, trade.speed = 0.1, trading.costs = 0.1){
# Calculate the times, when the trades will occur
trade_time <- Transactioncosts_date_finder(Weights,trade.speed)
names(trade_time) <- colnames(Weights)
# All days in wich no trade is made will be set to NA
for(i in 1:ncol(Weights)) Weights[!(index(Weights) %in% trade_time[[i]]),i] <- NA
# the costs rise, because they are growing over time and the last returns don't have any influence from the first costs in the calculations.
costs_raw <- abs(sign(Weights))
# costs_raw <- Weights * RAW.Data[index(Weights),] # scale the costs to the size of the trades (unfinished)
cost_vector <- cumsum(rowSums(costs_raw,na.rm = T))
# sort the unused indeces out of the raw data
if(ncol(RAW.Data) > ncol(Weights)){
colnames(RAW.Data) <- gsub("-", ".", colnames(RAW.Data))
colnames(Weights) <- gsub("-", ".", colnames(Weights))
RAW.Data.Cut <- RAW.Data[index(Weights),colnames(RAW.Data) %in% colnames(Weights)]
}else{
RAW.Data.Cut <- RAW.Data[index(Weights),]
}
# Fill NA's in weights with the last possible value
weights_over_time <- na.locf(Weights)
# Calculations of the portfolio
returns_raw <-  cumsum(rowSums(weights_over_time * na.fill(RAW.Data.Cut[index(weights_over_time),],0))) -
(cost_vector * trading.costs / Money_input)
returns_cost <- diff(xts(returns_raw, order.by = index(RAW.Data.Cut)))[-1,]
# save the dates when the algorithm trades and how much
trading_dates <- xts(rowSums(abs(sign(Weights)),na.rm = T),order.by = index(Weights))
# create a list with trading information about when and how much to invest into which index
trade_info <- list()
for(i in 1:ncol(Weights)){
save_list <- data.frame(trade_time[[i]],Money_input*as.numeric(na.exclude(Weights[,i])))
colnames(save_list) <- c("Trade Date","Inserted money")
trade_info[[i]] <- save_list
}
names(trade_info) <- colnames(Weights)
# create a dataframe
spent_on_trading <- data.frame(sum(trading_dates), sum(trading_dates)*trading.costs, sum(trading_dates)*trading.costs/Money_input)
colnames(spent_on_trading) <- c("Amount of trades","Spent money on trades", "Percentage of invested money spent on trades")
# Calculate the trading costs over time
cumsum_costs <- trade_info[[1]][,1]
for(i in 2:length(trade_info)){
cumsum_costs <- c(cumsum_costs,trade_info[[i]][,1])
}
cost_time_vector <- xts(rep(trading.costs,length(cumsum_costs)),order.by = cumsum_costs)
rbind(cost_time_vector,xts(0,order.by = index(last(Weights))))
# plot.xts(cumsum(cost_time_vector))
return(list(returns_cost,weights_over_time,trade_info,spent_on_trading,cost_time_vector))
}
### Example Input Data ####################.
### Load Data
# setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny_App/")
#
# Chosen_Indeces <- c("FTSE100_returns_1984-05-08" ,"Nikkei225_returns_1990-09-27" ,"SP500_returns_1982-04-23"
#                     ,"US_2Y_Note_returns_1990-06-26"
#                     ,"US_30Y_returns_1977-08-24"
#                     ,"AUD_returns_1987-01-15"
#                     ,"CHF_returns_1975-02-18"
#                     ,"GBP_returns_1975-02-18"
#                     ,"Copper_returns_1959-07-07"
#                     ,"Cotton_returns_1972-08-24"
#                     ,"Brent_Crude_returns_1993-03-19"
#                     ,"Heating_Oil_returns_bereinigt_1979-03-08"
#                     ,"Natural_Gas_returns_1990-04-05"
#                     ,"Gold_returns_1975-01-03"
#                     ,"Platinum_returns_1969-01-06"
#                     ,"Long_Gilt_returns_1990-08-21"
#                     ,"US_5Y_Note_returns_1988-05-24"
#                     ,"US_10Y_returns_1982-05-05")
#
#
# source("Portfolio/Load_Data.R")
# source("Portfolio/functions.R")
#
# Data.Path <- file.path(getwd(),"data_chosen")
# RAW.Total <- RAW_Data <- RAW.Data <- Load_Data(Data.names = as.character(Chosen_Indeces))
#
#
#
#
### calcualte demo portfolio
#
# lookback <- 2000
# source("Portfolio/Strategies/efficient_anwenden.R")
# portfolio <- efficient_anwenden(RAW.Data,lookback) # call the function above with random normal dist. for testing
#
# ## Trading cost calculations
# Weights <- portfolio[[1]]
# trade.speed = 0.01
# trading.costs = 1
# Money_input = 1000000
#
#
# ### Example Calculations
# A <- Transactioncosts_anwenden(Money_input = 100000,RAW.Data = RAW_Data,Weights = portfolio[[1]],trade.speed = 0.000001,trading.costs = 0)
#
# # retuns comparison
# plot.xts(exp(cumsum(portfolio[[2]])))¶
# lines(exp(cumsum(A[[1]])),col=2)
#
# # Analysis plot
# ts.plot(cumsum(t_costs[[1]]))
# matplot(t_costs[[2]], type = "l")
# length(t_costs[[3]]) # ... amount of trades
setwd("/Users/davidkuchelmeister/Studium/Bachelor Arbeit/Shiny_App/")
Chosen_Indeces <- c("FTSE100_returns_1984-05-08" ,"Nikkei225_returns_1990-09-27" ,"SP500_returns_1982-04-23"
,"US_2Y_Note_returns_1990-06-26"
,"US_30Y_returns_1977-08-24"
,"AUD_returns_1987-01-15"
,"CHF_returns_1975-02-18"
,"GBP_returns_1975-02-18"
,"Copper_returns_1959-07-07"
,"Cotton_returns_1972-08-24"
,"Brent_Crude_returns_1993-03-19"
,"Heating_Oil_returns_bereinigt_1979-03-08"
,"Natural_Gas_returns_1990-04-05"
,"Gold_returns_1975-01-03"
,"Platinum_returns_1969-01-06"
,"Long_Gilt_returns_1990-08-21"
,"US_5Y_Note_returns_1988-05-24"
,"US_10Y_returns_1982-05-05")
source("Portfolio/Load_Data.R")
source("Portfolio/functions.R")
Data.Path <- file.path(getwd(),"data_chosen")
RAW.Total <- RAW_Data <- RAW.Data <- Load_Data(Data.names = as.character(Chosen_Indeces))
lookback <- 2000
source("Portfolio/Strategies/efficient_anwenden.R")
portfolio <- efficient_anwenden(RAW.Data,lookback) # call the function above with random normal dist. for testing
## Trading cost calculations
Weights <- portfolio[[1]]
trade.speed = 0.01
trading.costs = 1
Money_input = 1000000
### Example Calculations
A <- Transactioncosts_anwenden(Money_input = 100000,RAW.Data = RAW_Data,Weights = portfolio[[1]],trade.speed = 0.000001,trading.costs = 0)
# retuns comparison
plot.xts(exp(cumsum(portfolio[[2]])))¶
lines(exp(cumsum(A[[1]])),col=2)
# Analysis plot
ts.plot(cumsum(t_costs[[1]]))
matplot(t_costs[[2]], type = "l")
length(t_costs[[3]]) # ... amount of trades
